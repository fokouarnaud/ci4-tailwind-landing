@echo off
echo.
echo ===================================================================
echo  üîß DEBUG COMPOSER ERROR - Render Dockerfile
echo ===================================================================
echo.

echo [1/4] üîç Diagnostic composer local...
echo.

:: Test composer localement
echo Test composer validate:
composer validate --no-check-all
if %errorlevel% equ 0 (
    echo ‚úÖ composer.json valide
) else (
    echo ‚ùå composer.json invalide
    goto :error
)

echo.
echo Test composer install local:
composer install --no-dev --optimize-autoloader --dry-run
if %errorlevel% equ 0 (
    echo ‚úÖ composer install fonctionne localement
) else (
    echo ‚ùå composer install √©choue localement
    echo.
    echo Tentative composer install basique:
    composer install --dry-run
    if %errorlevel% equ 0 (
        echo ‚úÖ composer install basique fonctionne
    ) else (
        echo ‚ùå composer install basique √©choue aussi
        goto :error
    )
)

echo.
echo [2/4] üìã V√©rification des fichiers requis...
echo.

:: V√©rifier structure
set "REQUIRED_FILES=composer.json composer.lock package.json package-lock.json public\index.php"

for %%f in (%REQUIRED_FILES%) do (
    if exist "%%f" (
        echo ‚úÖ %%f pr√©sent
    ) else (
        echo ‚ùå %%f manquant
        if "%%f"=="composer.lock" (
            echo G√©n√©ration composer.lock...
            composer update --lock
        )
    )
)

echo.
echo [3/4] üõ†Ô∏è Correction Dockerfile...
echo.

:: Le Dockerfile a √©t√© corrig√© avec:
echo ‚úÖ Dockerfile mis √† jour avec gestion d'erreurs
echo ‚úÖ Fallbacks multiples pour composer install
echo ‚úÖ Fallbacks multiples pour npm build
echo ‚úÖ Debug output pour diagnostics
echo ‚úÖ Installation Node.js 18 LTS sp√©cifique

echo.
echo [4/4] üìù Alternatives si probl√®me persiste...
echo.

:: Cr√©er composer.json minimal si probl√®me
if not exist "composer.json.backup" (
    copy "composer.json" "composer.json.backup"
    echo ‚úÖ Backup composer.json cr√©√©
)

echo.
echo ===================================================================
echo  üîß SOLUTIONS MULTIPLES
echo ===================================================================
echo.
echo 1. üì§ Push Dockerfile corrig√©:
echo    git add Dockerfile
echo    git commit -m "fix: Dockerfile with error handling and fallbacks"
echo    git push origin main
echo.
echo 2. üìä V√©rifier logs Render d√©taill√©s:
echo    - Dashboard ‚Üí Deployments ‚Üí View Logs
echo    - Chercher erreur exacte composer
echo.
echo 3. üîÑ Si composer √©choue encore, alternatives:
echo.
echo    A. Commit vendor/ directory:
echo       composer install --no-dev
echo       git add vendor/
echo       git commit -m "temp: add vendor directory"
echo.
echo    B. Simplifier composer.json:
echo       - Supprimer scripts post-install
echo       - Supprimer require-dev
echo.
echo    C. Build assets localement:
echo       npm run build:prod
echo       git add public/assets/
echo       git commit -m "temp: pre-built assets"
echo.

goto :success

:error
echo.
echo ‚ùå Probl√®me composer d√©tect√© localement
echo.
echo üîß Actions correctives:
echo    1. composer clear-cache
echo    2. rm composer.lock ^&^& composer install
echo    3. V√©rifier PHP version: php --version
echo.
goto :end

:success
echo.
echo ===================================================================
echo  üéØ PLAN D'ACTION
echo ===================================================================
echo.
echo ‚úÖ Dockerfile corrig√© avec gestion d'erreurs robuste
echo ‚úÖ Fallbacks multiples pour composer + npm
echo ‚úÖ Debug output pour identifier probl√®mes
echo.
echo üöÄ Prochaines √©tapes:
echo    1. git add Dockerfile
echo    2. git commit -m "fix: robust Dockerfile error handling"
echo    3. git push origin main
echo    4. V√©rifier logs Render pour diagnostic d√©taill√©
echo.
echo üí° Si √ßa √©choue encore:
echo    - Probl√®me probablement avec d√©pendances composer
echo    - On peut commit vendor/ temporairement
echo    - Ou pr√©-builder assets localement
echo.

:end
echo.
pause
